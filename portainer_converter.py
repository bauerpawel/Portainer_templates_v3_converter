#!/usr/bin/env python3
"""
Portainer Templates Converter v2 -> v3
Aplikacja konwertujƒÖca szablony Portainer z formatu v2 na v3

U≈ºycie:
    python portainer_converter.py [--url URL] [--output PLIK]
    python portainer_converter.py --help

Przyk≈Çady:
    # Domy≈õlna konwersja
    python portainer_converter.py

    # Z w≈Çasnym URL
    python portainer_converter.py --url "https://example.com/templates.json"

    # Z w≈ÇasnƒÖ nazwƒÖ pliku wyj≈õciowego
    python portainer_converter.py --output "my_templates_v3.json"

Autor: Python Script dla konwersji szablon√≥w Portainer
Data: 2025-08-27
Wersja: 1.0
"""

import json
import requests
import argparse
import sys
import os
from typing import Dict, Any, Optional
from datetime import datetime
from jsonschema import validate, ValidationError, Draft7Validator

class PortainerTemplateConverter:
    """Klasa do konwersji szablon√≥w Portainer z v2 na v3"""

    def __init__(self):
        self.default_v2_url = "https://raw.githubusercontent.com/Lissy93/portainer-templates/refs/heads/main/templates.json"
        self.default_output_file = "templates_v3_converted.json"
        self.schema_file = os.path.join(os.path.dirname(__file__), "schema_v3.json")
        self.schema = None

        # Lista popularnych ≈∫r√≥de≈Ç szablon√≥w Portainer v2
        self.known_sources = {
            'lissy93': {
                'name': 'Lissy93 Templates',
                'url': 'https://raw.githubusercontent.com/Lissy93/portainer-templates/refs/heads/main/templates.json',
                'description': 'Du≈ºa kolekcja ponad 470 szablon√≥w aplikacji'
            },
            'portainer-official': {
                'name': 'Portainer Official',
                'url': 'https://raw.githubusercontent.com/portainer/templates/master/templates-2.0.json',
                'description': 'Oficjalne szablony od zespo≈Çu Portainer'
            },
            'selfhosted': {
                'name': 'SelfHosted.show',
                'url': 'https://raw.githubusercontent.com/SelfhostedPro/selfhosted_templates/master/Template/template.json',
                'description': 'Szablony dla aplikacji self-hosted'
            },
            'technorabilia': {
                'name': 'Technorabilia',
                'url': 'https://raw.githubusercontent.com/technorabilia/portainer-templates/main/lsio/templates/templates-2.0.json',
                'description': 'Szablony bazujƒÖce na obrazach LinuxServer.io'
            }
        }

    def load_schema(self) -> Dict[str, Any]:
        """
        ≈Åaduje JSON Schema dla Portainer v3 templates
        """
        if self.schema is not None:
            return self.schema

        try:
            with open(self.schema_file, 'r', encoding='utf-8') as f:
                self.schema = json.load(f)
            return self.schema
        except FileNotFoundError:
            print(f"‚ö†Ô∏è  Ostrze≈ºenie: Plik schema nie zosta≈Ç znaleziony: {self.schema_file}")
            print("   Walidacja JSON Schema zostanie pominiƒôta")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è  Ostrze≈ºenie: B≈ÇƒÖd parsowania schema: {e}")
            print("   Walidacja JSON Schema zostanie pominiƒôta")
            return None

    def download_v2_templates(self, url: str, source_name: str = None) -> Optional[Dict[str, Any]]:
        """
        Pobiera szablon v2 z podanego URL
        """
        source_label = f" ({source_name})" if source_name else ""
        print(f"üì• Pobieranie szablonu v2 z: {url}{source_label}")

        try:
            response = requests.get(url, timeout=30)
            response.raise_for_status()

            data = response.json()

            if str(data.get('version')) != '2':
                print(f"‚ö†Ô∏è  Ostrze≈ºenie: Oczekiwano wersji '2', znaleziono '{data.get('version')}'")

            templates_count = len(data.get('templates', []))
            print(f"‚úÖ Pobrano {templates_count} szablon√≥w{source_label}")
            return data

        except requests.RequestException as e:
            print(f"‚ö†Ô∏è  B≈ÇƒÖd pobierania pliku{source_label}: {e}")
            return None
        except json.JSONDecodeError as e:
            print(f"‚ö†Ô∏è  B≈ÇƒÖd parsowania JSON{source_label}: {e}")
            return None

    def download_multiple_sources(self, urls: list) -> list:
        """
        Pobiera szablony z wielu ≈∫r√≥de≈Ç
        Zwraca listƒô tupli (url, data)
        """
        print(f"üì• Pobieranie szablon√≥w z {len(urls)} ≈∫r√≥de≈Ç...")
        print()

        results = []
        for i, url in enumerate(urls, 1):
            # Sprawdzamy czy to znane ≈∫r√≥d≈Ço
            source_name = None
            for key, source in self.known_sources.items():
                if source['url'] == url:
                    source_name = source['name']
                    break

            data = self.download_v2_templates(url, source_name)
            if data:
                results.append((url, data))
            print()

        print(f"‚úÖ Pobrano dane z {len(results)}/{len(urls)} ≈∫r√≥de≈Ç")
        return results

    def merge_templates(self, sources_data: list) -> Dict[str, Any]:
        """
        Scala szablony z wielu ≈∫r√≥de≈Ç i usuwa duplikaty
        sources_data: lista tupli (url, data)

        Duplikaty sƒÖ wykrywane na podstawie kombinacji:
        - name (nazwa)
        - image (obraz Docker)
        """
        print("üîÑ Scalanie szablon√≥w z wielu ≈∫r√≥de≈Ç...")

        all_templates = []
        seen_templates = {}  # Klucz: (name, image), warto≈õƒá: template
        stats = {
            'total_before': 0,
            'total_after': 0,
            'duplicates_removed': 0,
            'sources': {}
        }

        # Zbieramy wszystkie szablony
        for url, data in sources_data:
            templates = data.get('templates', [])
            stats['total_before'] += len(templates)
            stats['sources'][url] = len(templates)

            for template in templates:
                # Tworzymy klucz unikalno≈õci
                name = template.get('name', '').lower().strip()
                image = template.get('image', '').lower().strip()

                if not name or not image:
                    # Je≈õli brak name lub image, dodajemy zawsze
                    all_templates.append(template)
                    continue

                key = (name, image)

                if key in seen_templates:
                    # Duplikat znaleziony
                    stats['duplicates_removed'] += 1

                    # Mo≈ºemy scaliƒá informacje (np. kategorie)
                    existing = seen_templates[key]

                    # Scalamy kategorie
                    existing_cats = set(existing.get('categories', []))
                    new_cats = set(template.get('categories', []))
                    merged_cats = list(existing_cats | new_cats)
                    if merged_cats:
                        existing['categories'] = merged_cats

                    # Wybieramy d≈Çu≈ºszy opis je≈õli dostƒôpny
                    if len(template.get('description', '')) > len(existing.get('description', '')):
                        existing['description'] = template['description']
                else:
                    # Nowy szablon
                    seen_templates[key] = template
                    all_templates.append(template)

        stats['total_after'] = len(all_templates)

        print(f"‚úÖ Scalono szablony:")
        print(f"   ‚Ä¢ Szablony przed scaleniem: {stats['total_before']}")
        print(f"   ‚Ä¢ Szablony po scaleniu: {stats['total_after']}")
        print(f"   ‚Ä¢ Usuniƒôto duplikat√≥w: {stats['duplicates_removed']}")

        # Tworzymy po≈ÇƒÖczony obiekt v2
        merged_data = {
            'version': '2',
            'templates': all_templates
        }

        return merged_data, stats

    def convert_template(self, template: Dict[str, Any], template_id: int) -> Dict[str, Any]:
        """
        Konwertuje pojedynczy szablon z v2 na v3

        G≈Ç√≥wne zmiany:
        - Dodanie pola 'id' (unikalny identyfikator)
        - Dodanie pola 'labels' (pusta lista domy≈õlnie)
        - Migracja 'restart_policy' do labels jako com.docker.compose.restart-policy
        - Usuniƒôcie pola 'platform'
        """
        v3_template = {}

        # Dodajemy unikalny ID - kluczowa r√≥≈ºnica w v3
        v3_template['id'] = template_id

        # Pola do skopiowania bez zmian
        fields_to_copy = [
            'categories', 'description', 'env', 'image', 'logo',
            'maintainer', 'name', 'ports', 'title', 'type', 'volumes',
            'note', 'repository', 'hostname', 'command', 'network_mode',
            'privileged', 'interactive', 'administrator_only'
        ]

        for field in fields_to_copy:
            if field in template:
                v3_template[field] = template[field]

        # Dodajemy pole labels - nowe w v3
        # Migrujemy restart_policy z v2 do labels w v3
        v3_template['labels'] = []

        if 'restart_policy' in template and template['restart_policy']:
            v3_template['labels'].append({
                'name': 'com.docker.compose.restart-policy',
                'value': template['restart_policy']
            })

        # Pola usuwane w v3 (nie kopiujemy):
        # - 'restart_policy': polityka restartowania - w v3 migrowana do labels
        # - 'platform': informacja o platformie - nie jest u≈ºywana w v3

        return v3_template

    def convert_v2_to_v3(self, v2_data: Dict[str, Any]) -> Dict[str, Any]:
        """
        G≈Ç√≥wna funkcja konwersji z v2 na v3
        """
        print("üîÑ Rozpoczynanie konwersji v2 -> v3...")

        v3_data = {
            "version": "3",
            "templates": []
        }

        # Konwertujemy ka≈ºdy szablon
        templates = v2_data.get('templates', [])
        for idx, template in enumerate(templates, 1):
            converted_template = self.convert_template(template, idx)
            v3_data['templates'].append(converted_template)

        print(f"‚úÖ Konwersja zako≈Ñczona! Przekonwertowano {len(templates)} szablon√≥w")
        return v3_data

    def save_v3_templates(self, v3_data: Dict[str, Any], filename: str) -> str:
        """
        Zapisuje szablon v3 do pliku JSON z ≈Çadnym formatowaniem
        """
        print(f"üíæ Zapisywanie do pliku: {filename}")

        try:
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(v3_data, f, indent=2, ensure_ascii=False)

            file_size = round(len(json.dumps(v3_data)) / 1024, 2)
            print(f"‚úÖ Plik zapisany pomy≈õlnie: {filename} ({file_size} KB)")
            return filename

        except IOError as e:
            print(f"‚ùå B≈ÇƒÖd zapisywania pliku: {e}")
            sys.exit(1)

    def validate_with_json_schema(self, v3_data: Dict[str, Any]) -> bool:
        """
        Walidacja z u≈ºyciem oficjalnego JSON Schema
        """
        print("üîç Walidacja z JSON Schema...")

        schema = self.load_schema()
        if schema is None:
            print("‚ö†Ô∏è  Pomijam walidacjƒô JSON Schema (brak pliku schema)")
            return True

        try:
            # Tworzymy validator
            validator = Draft7Validator(schema)

            # Zbieramy wszystkie b≈Çƒôdy
            errors = list(validator.iter_errors(v3_data))

            if errors:
                print(f"‚ùå Znaleziono {len(errors)} b≈Çƒôd√≥w walidacji JSON Schema:")
                # Pokazujemy do 10 najwa≈ºniejszych b≈Çƒôd√≥w
                for i, error in enumerate(errors[:10], 1):
                    # Tworzymy ≈õcie≈ºkƒô do b≈Çƒôdu
                    path = " -> ".join(str(p) for p in error.path) if error.path else "root"
                    print(f"   {i}. {path}: {error.message}")

                if len(errors) > 10:
                    print(f"   ... i {len(errors) - 10} wiƒôcej b≈Çƒôd√≥w")
                return False

            print("‚úÖ Walidacja JSON Schema zako≈Ñczona pomy≈õlnie")
            return True

        except Exception as e:
            print(f"‚ùå B≈ÇƒÖd podczas walidacji JSON Schema: {e}")
            return False

    def validate_v3_format(self, v3_data: Dict[str, Any]) -> bool:
        """
        Kompleksowa walidacja formatu v3
        ≈ÅƒÖczy walidacjƒô JSON Schema z dodatkowymi sprawdzeniami
        """
        print("üîç Walidacja formatu v3...")

        # 1. Walidacja z JSON Schema (je≈õli dostƒôpna)
        schema_valid = self.validate_with_json_schema(v3_data)

        # 2. Podstawowa walidacja struktury
        if str(v3_data.get('version')) != '3':
            print("‚ùå Nieprawid≈Çowa wersja (oczekiwano '3')")
            return False

        templates = v3_data.get('templates', [])
        if not templates:
            print("‚ùå Brak szablon√≥w")
            return False

        # 3. Dodatkowe sprawdzenia biznesowe
        print("üîç Dodatkowe sprawdzenia biznesowe...")
        warnings = []
        errors = []

        for i, template in enumerate(templates, 1):
            # Sprawdzenie starych p√≥l z v2
            old_fields = ['restart_policy', 'platform']
            for field in old_fields:
                if field in template:
                    warnings.append(f"Szablon {i} ('{template.get('title', 'unknown')}'): zawiera stare pole '{field}' z v2")

            # Sprawdzenie czy labels jest listƒÖ (je≈õli istnieje)
            if 'labels' in template and not isinstance(template['labels'], list):
                errors.append(f"Szablon {i} ('{template.get('title', 'unknown')}'): pole 'labels' powinno byƒá listƒÖ")

        # Pokazujemy ostrze≈ºenia
        if warnings:
            print(f"‚ö†Ô∏è  Znaleziono {len(warnings)} ostrze≈ºe≈Ñ:")
            for warning in warnings[:5]:
                print(f"   ‚Ä¢ {warning}")
            if len(warnings) > 5:
                print(f"   ... i {len(warnings) - 5} wiƒôcej ostrze≈ºe≈Ñ")

        # Pokazujemy b≈Çƒôdy
        if errors:
            print(f"‚ùå Znaleziono {len(errors)} b≈Çƒôd√≥w:")
            for error in errors[:10]:
                print(f"   ‚Ä¢ {error}")
            if len(errors) > 10:
                print(f"   ... i {len(errors) - 10} wiƒôcej b≈Çƒôd√≥w")
            return False

        if not schema_valid:
            return False

        print("‚úÖ Walidacja zako≈Ñczona pomy≈õlnie")
        return True

    def show_statistics(self, v2_data: Dict[str, Any], v3_data: Dict[str, Any]):
        """
        Pokazuje statystyki konwersji
        """
        print("üìä Statystyki konwersji:")

        v2_templates = v2_data.get('templates', [])
        v3_templates = v3_data.get('templates', [])

        print(f"   ‚Ä¢ Szablony ≈∫r√≥d≈Çowe (v2): {len(v2_templates)}")
        print(f"   ‚Ä¢ Szablony docelowe (v3): {len(v3_templates)}")

        # Statystyki typ√≥w
        type_stats = {}
        for template in v3_templates:
            template_type = template.get('type', 'unknown')
            type_stats[template_type] = type_stats.get(template_type, 0) + 1

        print("   ‚Ä¢ Typy szablon√≥w:")
        type_names = {1: 'Kontenery', 2: 'Stosy Swarm', 3: 'Stosy Compose'}
        for t_type, count in sorted(type_stats.items()):
            type_name = type_names.get(t_type, f'Typ {t_type}')
            print(f"     - {type_name}: {count}")

        # Statystyki kategorii
        categories = {}
        for template in v3_templates:
            for category in template.get('categories', []):
                categories[category] = categories.get(category, 0) + 1

        if categories:
            print(f"   ‚Ä¢ Top 5 kategorii:")
            for category, count in sorted(categories.items(), key=lambda x: x[1], reverse=True)[:5]:
                print(f"     - {category}: {count}")

    def list_sources(self):
        """
        Wy≈õwietla listƒô dostƒôpnych ≈∫r√≥de≈Ç szablon√≥w
        """
        print("üìö Dostƒôpne ≈∫r√≥d≈Ça szablon√≥w Portainer:")
        print("="*50)
        for key, source in self.known_sources.items():
            print(f"\nüîπ {source['name']} (klucz: {key})")
            print(f"   URL: {source['url']}")
            print(f"   Opis: {source['description']}")
        print()

    def run(self, source_url: Optional[str] = None, output_file: Optional[str] = None,
            multiple_sources: Optional[list] = None, all_sources: bool = False):
        """
        G≈Ç√≥wna metoda uruchamiajƒÖca ca≈Çy proces konwersji

        Args:
            source_url: pojedynczy URL ≈∫r√≥d≈Çowy
            output_file: plik wyj≈õciowy
            multiple_sources: lista URL-i lub kluczy ≈∫r√≥de≈Ç
            all_sources: u≈ºyj wszystkich znanych ≈∫r√≥de≈Ç
        """
        print("üöÄ Portainer Templates Converter v2 -> v3")
        print("="*50)
        print(f"‚è∞ Start: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print()

        # U≈ºywamy domy≈õlnych warto≈õci je≈õli nie podano
        output_file = output_file or self.default_output_file

        try:
            merge_stats = None

            # Okre≈õlamy ≈∫r√≥d≈Ça do pobrania
            if all_sources:
                # Pobieramy wszystkie znane ≈∫r√≥d≈Ça
                urls = [source['url'] for source in self.known_sources.values()]
                sources_data = self.download_multiple_sources(urls)

                if not sources_data:
                    print("‚ùå Nie uda≈Ço siƒô pobraƒá ≈ºadnego ≈∫r√≥d≈Ça")
                    sys.exit(1)

                v2_data, merge_stats = self.merge_templates(sources_data)

            elif multiple_sources:
                # Pobieramy z wielu ≈∫r√≥de≈Ç
                urls = []
                for source in multiple_sources:
                    # Sprawdzamy czy to klucz znanego ≈∫r√≥d≈Ça
                    if source in self.known_sources:
                        urls.append(self.known_sources[source]['url'])
                    else:
                        # Traktujemy jako URL
                        urls.append(source)

                sources_data = self.download_multiple_sources(urls)

                if not sources_data:
                    print("‚ùå Nie uda≈Ço siƒô pobraƒá ≈ºadnego ≈∫r√≥d≈Ça")
                    sys.exit(1)

                v2_data, merge_stats = self.merge_templates(sources_data)

            else:
                # Pojedyncze ≈∫r√≥d≈Ço
                source_url = source_url or self.default_v2_url
                v2_data = self.download_v2_templates(source_url)

                if not v2_data:
                    print("‚ùå Nie uda≈Ço siƒô pobraƒá szablon√≥w")
                    sys.exit(1)

            print()

            # 2. Konwersja v2 -> v3
            v3_data = self.convert_v2_to_v3(v2_data)

            # 3. Walidacja
            if not self.validate_v3_format(v3_data):
                print("‚ùå Walidacja nie powiod≈Ça siƒô")
                sys.exit(1)

            # 4. Zapisywanie do pliku
            output_filename = self.save_v3_templates(v3_data, output_file)

            # 5. Statystyki
            print()
            self.show_statistics(v2_data, v3_data)

            print()
            print("üìã Podsumowanie:")

            if merge_stats:
                print(f"   ‚Ä¢ ≈πr√≥d≈Ça: {len(merge_stats['sources'])} r√≥≈ºnych ≈∫r√≥de≈Ç")
                for url, count in merge_stats['sources'].items():
                    # Znajd≈∫ nazwƒô ≈∫r√≥d≈Ça je≈õli znane
                    source_name = None
                    for source in self.known_sources.values():
                        if source['url'] == url:
                            source_name = source['name']
                            break
                    label = f" ({source_name})" if source_name else ""
                    print(f"     - {count} szablon√≥w{label}")
                print(f"   ‚Ä¢ Duplikaty usuniƒôte: {merge_stats['duplicates_removed']}")
            else:
                print(f"   ‚Ä¢ ≈πr√≥d≈Ço: {source_url}")

            print(f"   ‚Ä¢ Wersja ≈∫r√≥d≈Çowa: v{v2_data.get('version')}")
            print(f"   ‚Ä¢ Wersja docelowa: v{v3_data.get('version')}")
            print(f"   ‚Ä¢ Liczba szablon√≥w: {len(v3_data['templates'])}")
            print(f"   ‚Ä¢ Plik wyj≈õciowy: {output_filename}")
            print()
            print("üéâ Konwersja zako≈Ñczona pomy≈õlnie!")
            print()
            print("üí° Jak u≈ºywaƒá:")
            print(f"   1. Skopiuj plik '{output_filename}' na serwer")
            print("   2. W Portainer przejd≈∫ do Settings -> App Templates")
            print("   3. Wklej URL do pliku lub u≈ºyj lokalnego pliku")
            print("   4. Zapisz ustawienia i ciesz siƒô szablonami v3!")

        except KeyboardInterrupt:
            print("\n‚ùå Operacja anulowana przez u≈ºytkownika")
            sys.exit(1)
        except Exception as e:
            print(f"‚ùå Nieoczekiwany b≈ÇƒÖd: {e}")
            import traceback
            traceback.print_exc()
            sys.exit(1)

def main():
    """
    Funkcja g≈Ç√≥wna obs≈ÇugujƒÖca argumenty z linii polece≈Ñ
    """
    parser = argparse.ArgumentParser(
        description="Konwertuje szablony Portainer z formatu v2 na v3",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Przyk≈Çady u≈ºycia:
  %(prog)s
    Konwersja z domy≈õlnego URL do domy≈õlnego pliku

  %(prog)s --url "https://example.com/templates.json"
    Konwersja z w≈Çasnego URL

  %(prog)s --output "my_templates_v3.json"
    Konwersja do w≈Çasnego pliku

  %(prog)s --sources lissy93 portainer-official
    Scala szablony z wielu ≈∫r√≥de≈Ç (po kluczu)

  %(prog)s --sources "https://example.com/templates.json" lissy93
    Scala szablony z URL i znanego ≈∫r√≥d≈Ça

  %(prog)s --all-sources
    Scala szablony ze wszystkich znanych ≈∫r√≥de≈Ç

  %(prog)s --list-sources
    Wy≈õwietl listƒô dostƒôpnych ≈∫r√≥de≈Ç

G≈Ç√≥wne r√≥≈ºnice v2 -> v3:
  ‚Ä¢ Dodano pole 'id' (unikalny identyfikator)
  ‚Ä¢ Dodano pole 'labels' (etykiety Docker)
  ‚Ä¢ Zmigrowano 'restart_policy' do labels jako 'com.docker.compose.restart-policy'
  ‚Ä¢ Usuniƒôto pole 'platform'
  ‚Ä¢ Zmieniono wersjƒô na '3'

Scalanie ≈∫r√≥de≈Ç:
  ‚Ä¢ Duplikaty sƒÖ wykrywane po kombinacji (name, image)
  ‚Ä¢ Kategorie z duplikat√≥w sƒÖ scalane
  ‚Ä¢ Wybierany jest d≈Çu≈ºszy opis
        """
    )

    parser.add_argument(
        '--url', '-u',
        help='URL do pliku templates.json w formacie v2 '
             '(domy≈õlnie: szablony Lissy93)',
        metavar='URL'
    )

    parser.add_argument(
        '--output', '-o',
        help='Nazwa pliku wyj≈õciowego (domy≈õlnie: templates_v3_converted.json)',
        metavar='PLIK'
    )

    parser.add_argument(
        '--sources', '-s',
        nargs='+',
        help='Lista ≈∫r√≥de≈Ç do scalenia (klucze lub URL-e)',
        metavar='≈πR√ìD≈ÅO'
    )

    parser.add_argument(
        '--all-sources', '-a',
        action='store_true',
        help='U≈ºyj wszystkich znanych ≈∫r√≥de≈Ç szablon√≥w'
    )

    parser.add_argument(
        '--list-sources', '-l',
        action='store_true',
        help='Wy≈õwietl listƒô dostƒôpnych ≈∫r√≥de≈Ç'
    )

    parser.add_argument(
        '--version', '-v',
        action='version',
        version='Portainer Templates Converter 2.0'
    )

    args = parser.parse_args()

    # Inicjalizujemy konwerter
    converter = PortainerTemplateConverter()

    # Je≈õli --list-sources, tylko wy≈õwietlamy ≈∫r√≥d≈Ça
    if args.list_sources:
        converter.list_sources()
        return

    # Sprawdzamy konflikty argument√≥w
    if args.url and (args.sources or args.all_sources):
        print("‚ùå B≈ÇƒÖd: Nie mo≈ºna u≈ºyƒá --url razem z --sources lub --all-sources")
        sys.exit(1)

    # Uruchamiamy konwersjƒô
    converter.run(
        source_url=args.url,
        output_file=args.output,
        multiple_sources=args.sources,
        all_sources=args.all_sources
    )

if __name__ == "__main__":
    main()
